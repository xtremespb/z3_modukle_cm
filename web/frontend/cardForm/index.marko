import Cookies from "../../../../../shared/lib/cookies"
import generate from "../../../api/data/generate.json"

$ const cookies = new Cookies(out.global.cookieOptions);
$ const token = cookies.get(`${out.global.siteOptions.id || "zoia3"}.authToken`);
$ const holdingData = out.global.userHoldingData;
$ const common = out.global.common;
<if(state.title)>
  <h1 class="title">${state.title}</h1>
</if>
<div class="box">
  <mform key="z3_cm_cardForm" id="cardForm" save={
    url: "/api/cm/card/generate",
    extras: {},
    headers: {
      Authorization: `Bearer ${token}`
    }
  } fields=[
    [
      {
        id: "cardType",
        type: "select",
        label: out.global.i18n.t("cardType"),
        options: [{ value: 0, label: "–" }, ...holdingData.cards.map((c, i) => ({ value: i + 1, label: c.id.toUpperCase() }))],
        defaultValue: "0",
        css: "is-fullwidth",
        wrapCSS: "z3-is-medium",
        convert: "integer",
        mandatory: true,
        autoFocus: true
      },
      {
        id: "cardNumber",
        type: "text",
        label: out.global.i18n.t("cardNumber"),
        wrapCSS: "z3-is-medium",
        convert: "integer",
        helpText: `${common.minCardNumber} - ${common.maxCardNumber}`,
        maskOptions: {
          mask: /^[0-9]+$/i
        },
        emptyNull: true
      },
      {
        id: "room",
        type: "select",
        label: out.global.i18n.t("room"),
        options: [{ value: 0, label: "–" }, ...holdingData.rooms.map((r, i) => ({ value: i + 1, label: r }))],
        defaultValue: "0",
        convert: "integer",
        css: "is-fullwidth",
        wrapCSS: "z3-is-large",
        mandatory: true
      }
    ],
    [
      {
        id: "customerName",
        type: "text",
        label: out.global.i18n.t("customerName"),
        wrapCSS: "z3-is-xlarge",
        mandatory: true
      },
      {
        id: "customerBirthDate",
        type: "text",
        label: out.global.i18n.t("customerBirthDate"),
        wrapCSS: "z3-is-small",
        helpText: out.global.i18n.t("customerBirthDateHelpText"),
        mandatory: true,
        placeholder: "__.__.____",
        maskOptions: {
          mask: Date,
          min: new Date(1900, 0, 1),
          max: new Date(2049, 0, 1),
          lazy: true
        }
      },
      {
        id: "customerPhone",
        type: "text",
        label: out.global.i18n.t("customerPhone"),
        helpText: out.global.i18n.t("customerPhoneHelpText"),
        wrapCSS: "z3-is-medium",
        mandatory: true,
        placeholder: "+7-___-___-__-__",
        maskOptions: {
          mask: "+{7}-000-000-00-00",
          lazy: true
        }
      },
      {
        id: "customerEmail",
        type: "text",
        label: out.global.i18n.t("customerEmail"),
        helpText: out.global.i18n.t("customerEmailHelpText"),
        wrapCSS: "z3-is-large",
        mandatory: true
      },
      {
        id: "customerAddress",
        type: "text",
        label: out.global.i18n.t("customerAddress"),
        wrapCSS: "z3-is-xlarge",
        mandatory: true
      }
    ],
    [
      {
        id: "date",
        type: "text",
        label: out.global.i18n.t("date"),
        helpText: out.global.i18n.t("dateHelpText"),
        wrapCSS: "z3-is-small",
        mandatory: true,
        placeholder: "__.__.____",
        maskOptions: {
          mask: Date,
          min: new Date(1900, 0, 1),
          max: new Date(2049, 0, 1),
          lazy: true
        }
      },
      {
        id: "price",
        type: "text",
        label: out.global.i18n.t("price"),
        helpText: out.global.i18n.t("priceHelpText"),
        wrapCSS: "z3-is-small",
        convert: "float",
        maskOptions: {
          mask: Number,
          min: 0,
          max: 99999999,
          thousandsSeparator: ".",
          lazy: true
        }
      },
      {
        id: "years",
        type: "text",
        label: out.global.i18n.t("years"),
        helpText: out.global.i18n.t("yearsHelpText"),
        convert: "integer",
        wrapCSS: "z3-is-small",
        maskOptions: {
          mask: Number,
          min: 0,
          max: 999,
          lazy: true
        }
      }
    ],
    [
      {
        id: "creditSum",
        type: "text",
        label: out.global.i18n.t("creditSum"),
        convert: "float",
        wrapCSS: "z3-is-small",
        maskOptions: {
          mask: Number,
          min: 0,
          max: 99999999,
          thousandsSeparator: ".",
          lazy: true
        }
      },
      {
        id: "creditMonths",
        type: "text",
        label: out.global.i18n.t("creditMonths"),
        helpText: out.global.i18n.t("creditMonthsHelpText"),
        convert: "integer",
        wrapCSS: "z3-is-small",
        maskOptions: {
          mask: Number,
          min: 0,
          max: 999,
          lazy: true
        },
        emptyNull: true
      },
      {
        id: "creditPercentage",
        type: "range",
        convert: "integer",
        label: out.global.i18n.t("creditPercentage"),
        wrapCSS: "z3-is-small",
        min: 2,
        max: 4,
        defaultValue: 2
      }
    ],
    {
      id: "div1",
      type: "divider"
    },
    {
      id: "bg1",
      type: "buttons",
      data: [
        {
          id: "btnGenerate",
          type: "button",
          buttonType: "submit",
          label: out.global.i18n.t("generate"),
          css: "is-primary"
        },
        {
          id: "btnReset",
          type: "button",
          buttonType: "button",
          label: out.global.i18n.t("reset"),
          css: "is-warning"
        },
        {
          id: "btnPrintOffer",
          type: "button",
          buttonType: "button",
          label: out.global.i18n.t("printOffer"),
          css: "is-light"
        }
      ]
    }
  ] validation=generate progressButtonId="btnGenerate" i18n=out.global.i18n manual=true on-form-submit("onFormSubmit") on-button-click("onButtonClick") on-post-success("onFormPostSuccess") on-value-change("onFormValueChange") on-all-settled("onFormSettled")/>
</div>
<if(state.calcLegacy)>
  <div class="box mt-5">
    <div class="table-container">
      <table class="table is-striped is-narrow is-hoverable is-fullwidth">
        <thead>
          <tr>
            <th>${out.global.i18n.t("title")}</th>
            <th class="has-text-centered">${out.global.i18n.t("amount")}</th>
            <th class="has-text-centered">${out.global.i18n.t("cost")}</th>
          </tr>
        </thead>
        <tfoot>
          <tr>
            <th>${out.global.i18n.t("total")}</th>
            <th>&nbsp;</th>
            <th class="has-text-centered">${state.calcLegacy.productCost} ₽</th>
          </tr>
        </tfoot>
        <tbody>
          <for|item| of=state.calcLegacy.components>
            <tr>
              <td>${item.title}</td>
              <td class="has-text-centered">${item.amount}</td>
              <td class="has-text-centered">${item.cost} ₽</td>
            </tr>
          </for>
          <tr>
            <td>${out.global.i18n.t("office")}</td>
            <td>&nbsp;</td>
            <td class="has-text-centered">${state.calcLegacy.office} ₽</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</if>
<mnotify key=`cardForm_mnotify`/>
<generateModal key="z3_cm_generateModal" on-confirm-click("onConfirmClick")/>
<certModal key="z3_cm_certModal"/>
